/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// Transcription or translation segment.
    /// </summary>
    [DataContract(Name = "audioSegment")]
    public partial class AudioSegment : IEquatable<AudioSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioSegment" /> class.
        /// </summary>
        /// <param name="id">Segment identifier..</param>
        /// <param name="seek">Offset of the segment..</param>
        /// <param name="start">Segment start offset..</param>
        /// <param name="end">Segment end offset..</param>
        /// <param name="text">Segment text..</param>
        /// <param name="tokens">Tokens of the text..</param>
        /// <param name="temperature">Temperature..</param>
        /// <param name="avgLogprob">Average log probability..</param>
        /// <param name="compressionRatio">Compression ratio..</param>
        /// <param name="noSpeechProb">Probability of &#39;no speech&#39;..</param>
        public AudioSegment(int id = default(int), decimal seek = default(decimal), decimal start = default(decimal), decimal end = default(decimal), string text = default(string), List<decimal> tokens = default(List<decimal>), decimal temperature = default(decimal), decimal avgLogprob = default(decimal), decimal compressionRatio = default(decimal), decimal noSpeechProb = default(decimal))
        {
            this.Id = id;
            this.Seek = seek;
            this.Start = start;
            this.End = end;
            this.Text = text;
            this.Tokens = tokens;
            this.Temperature = temperature;
            this.AvgLogprob = avgLogprob;
            this.CompressionRatio = compressionRatio;
            this.NoSpeechProb = noSpeechProb;
        }

        /// <summary>
        /// Segment identifier.
        /// </summary>
        /// <value>Segment identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Offset of the segment.
        /// </summary>
        /// <value>Offset of the segment.</value>
        [DataMember(Name = "seek", EmitDefaultValue = true)]
        public decimal Seek { get; set; }

        /// <summary>
        /// Segment start offset.
        /// </summary>
        /// <value>Segment start offset.</value>
        [DataMember(Name = "start", EmitDefaultValue = true)]
        public decimal Start { get; set; }

        /// <summary>
        /// Segment end offset.
        /// </summary>
        /// <value>Segment end offset.</value>
        [DataMember(Name = "end", EmitDefaultValue = true)]
        public decimal End { get; set; }

        /// <summary>
        /// Segment text.
        /// </summary>
        /// <value>Segment text.</value>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Tokens of the text.
        /// </summary>
        /// <value>Tokens of the text.</value>
        [DataMember(Name = "tokens", EmitDefaultValue = true)]
        public List<decimal> Tokens { get; set; }

        /// <summary>
        /// Temperature.
        /// </summary>
        /// <value>Temperature.</value>
        [DataMember(Name = "temperature", EmitDefaultValue = true)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Average log probability.
        /// </summary>
        /// <value>Average log probability.</value>
        [DataMember(Name = "avg_logprob", EmitDefaultValue = true)]
        public decimal AvgLogprob { get; set; }

        /// <summary>
        /// Compression ratio.
        /// </summary>
        /// <value>Compression ratio.</value>
        [DataMember(Name = "compression_ratio", EmitDefaultValue = true)]
        public decimal CompressionRatio { get; set; }

        /// <summary>
        /// Probability of &#39;no speech&#39;.
        /// </summary>
        /// <value>Probability of &#39;no speech&#39;.</value>
        [DataMember(Name = "no_speech_prob", EmitDefaultValue = true)]
        public decimal NoSpeechProb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudioSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Seek: ").Append(Seek).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  AvgLogprob: ").Append(AvgLogprob).Append("\n");
            sb.Append("  CompressionRatio: ").Append(CompressionRatio).Append("\n");
            sb.Append("  NoSpeechProb: ").Append(NoSpeechProb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudioSegment);
        }

        /// <summary>
        /// Returns true if AudioSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of AudioSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudioSegment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Seek == input.Seek ||
                    this.Seek.Equals(input.Seek)
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) && 
                (
                    this.End == input.End ||
                    this.End.Equals(input.End)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    this.Temperature.Equals(input.Temperature)
                ) && 
                (
                    this.AvgLogprob == input.AvgLogprob ||
                    this.AvgLogprob.Equals(input.AvgLogprob)
                ) && 
                (
                    this.CompressionRatio == input.CompressionRatio ||
                    this.CompressionRatio.Equals(input.CompressionRatio)
                ) && 
                (
                    this.NoSpeechProb == input.NoSpeechProb ||
                    this.NoSpeechProb.Equals(input.NoSpeechProb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Seek.GetHashCode();
                hashCode = (hashCode * 59) + this.Start.GetHashCode();
                hashCode = (hashCode * 59) + this.End.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                hashCode = (hashCode * 59) + this.AvgLogprob.GetHashCode();
                hashCode = (hashCode * 59) + this.CompressionRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.NoSpeechProb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// Translation or transcription response when response_format was verbose_json
    /// </summary>
    [DataContract(Name = "audioVerboseResponse")]
    public partial class AudioVerboseResponse : IEquatable<AudioVerboseResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of audio task.
        /// </summary>
        /// <value>Type of audio task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskEnum
        {
            /// <summary>
            /// Enum Transcribe for value: transcribe
            /// </summary>
            [EnumMember(Value = "transcribe")]
            Transcribe = 1,

            /// <summary>
            /// Enum Translate for value: translate
            /// </summary>
            [EnumMember(Value = "translate")]
            Translate = 2
        }


        /// <summary>
        /// Type of audio task.
        /// </summary>
        /// <value>Type of audio task.</value>
        [DataMember(Name = "task", EmitDefaultValue = true)]
        public TaskEnum? Task { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioVerboseResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudioVerboseResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioVerboseResponse" /> class.
        /// </summary>
        /// <param name="text">Translated or transcribed text. (required).</param>
        /// <param name="task">Type of audio task..</param>
        /// <param name="language">Language..</param>
        /// <param name="duration">Duration..</param>
        /// <param name="segments">segments.</param>
        public AudioVerboseResponse(string text = default(string), TaskEnum? task = default(TaskEnum?), string language = default(string), decimal duration = default(decimal), List<AudioSegment> segments = default(List<AudioSegment>))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for AudioVerboseResponse and cannot be null");
            }
            this.Text = text;
            this.Task = task;
            this.Language = language;
            this.Duration = duration;
            this.Segments = segments;
        }

        /// <summary>
        /// Translated or transcribed text.
        /// </summary>
        /// <value>Translated or transcribed text.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Language.
        /// </summary>
        /// <value>Language.</value>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Duration.
        /// </summary>
        /// <value>Duration.</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name = "segments", EmitDefaultValue = true)]
        public List<AudioSegment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudioVerboseResponse {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudioVerboseResponse);
        }

        /// <summary>
        /// Returns true if AudioVerboseResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AudioVerboseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudioVerboseResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Task == input.Task ||
                    this.Task.Equals(input.Task)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Task.GetHashCode();
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                if (this.Segments != null)
                {
                    hashCode = (hashCode * 59) + this.Segments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

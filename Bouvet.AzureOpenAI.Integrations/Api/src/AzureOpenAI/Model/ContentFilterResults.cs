/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not.
    /// </summary>
    [DataContract(Name = "contentFilterResults")]
    public partial class ContentFilterResults : IEquatable<ContentFilterResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterResults" /> class.
        /// </summary>
        /// <param name="sexual">sexual.</param>
        /// <param name="violence">violence.</param>
        /// <param name="hate">hate.</param>
        /// <param name="selfHarm">selfHarm.</param>
        /// <param name="error">error.</param>
        public ContentFilterResults(ContentFilterResult sexual = default(ContentFilterResult), ContentFilterResult violence = default(ContentFilterResult), ContentFilterResult hate = default(ContentFilterResult), ContentFilterResult selfHarm = default(ContentFilterResult), ErrorBase error = default(ErrorBase))
        {
            this.Sexual = sexual;
            this.Violence = violence;
            this.Hate = hate;
            this.SelfHarm = selfHarm;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets Sexual
        /// </summary>
        [DataMember(Name = "sexual", EmitDefaultValue = true)]
        public ContentFilterResult Sexual { get; set; }

        /// <summary>
        /// Gets or Sets Violence
        /// </summary>
        [DataMember(Name = "violence", EmitDefaultValue = true)]
        public ContentFilterResult Violence { get; set; }

        /// <summary>
        /// Gets or Sets Hate
        /// </summary>
        [DataMember(Name = "hate", EmitDefaultValue = true)]
        public ContentFilterResult Hate { get; set; }

        /// <summary>
        /// Gets or Sets SelfHarm
        /// </summary>
        [DataMember(Name = "self_harm", EmitDefaultValue = true)]
        public ContentFilterResult SelfHarm { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public ErrorBase Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterResults {\n");
            sb.Append("  Sexual: ").Append(Sexual).Append("\n");
            sb.Append("  Violence: ").Append(Violence).Append("\n");
            sb.Append("  Hate: ").Append(Hate).Append("\n");
            sb.Append("  SelfHarm: ").Append(SelfHarm).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterResults);
        }

        /// <summary>
        /// Returns true if ContentFilterResults instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sexual == input.Sexual ||
                    (this.Sexual != null &&
                    this.Sexual.Equals(input.Sexual))
                ) && 
                (
                    this.Violence == input.Violence ||
                    (this.Violence != null &&
                    this.Violence.Equals(input.Violence))
                ) && 
                (
                    this.Hate == input.Hate ||
                    (this.Hate != null &&
                    this.Hate.Equals(input.Hate))
                ) && 
                (
                    this.SelfHarm == input.SelfHarm ||
                    (this.SelfHarm != null &&
                    this.SelfHarm.Equals(input.SelfHarm))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sexual != null)
                {
                    hashCode = (hashCode * 59) + this.Sexual.GetHashCode();
                }
                if (this.Violence != null)
                {
                    hashCode = (hashCode * 59) + this.Violence.GetHashCode();
                }
                if (this.Hate != null)
                {
                    hashCode = (hashCode * 59) + this.Hate.GetHashCode();
                }
                if (this.SelfHarm != null)
                {
                    hashCode = (hashCode * 59) + this.SelfHarm.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

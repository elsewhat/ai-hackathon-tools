/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// EmbeddingsCreate200Response
    /// </summary>
    [DataContract(Name = "embeddings_create_200_response")]
    public partial class EmbeddingsCreate200Response : IEquatable<EmbeddingsCreate200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddingsCreate200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmbeddingsCreate200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddingsCreate200Response" /> class.
        /// </summary>
        /// <param name="varObject">varObject (required).</param>
        /// <param name="model">model (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="usage">usage (required).</param>
        public EmbeddingsCreate200Response(string varObject = default(string), string model = default(string), List<EmbeddingsCreate200ResponseDataInner> data = default(List<EmbeddingsCreate200ResponseDataInner>), EmbeddingsCreate200ResponseUsage usage = default(EmbeddingsCreate200ResponseUsage))
        {
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for EmbeddingsCreate200Response and cannot be null");
            }
            this.VarObject = varObject;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for EmbeddingsCreate200Response and cannot be null");
            }
            this.Model = model;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for EmbeddingsCreate200Response and cannot be null");
            }
            this.Data = data;
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new ArgumentNullException("usage is a required property for EmbeddingsCreate200Response and cannot be null");
            }
            this.Usage = usage;
        }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string VarObject { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<EmbeddingsCreate200ResponseDataInner> Data { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public EmbeddingsCreate200ResponseUsage Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddingsCreate200Response {\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbeddingsCreate200Response);
        }

        /// <summary>
        /// Returns true if EmbeddingsCreate200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbeddingsCreate200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbeddingsCreate200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarObject == input.VarObject ||
                    (this.VarObject != null &&
                    this.VarObject.Equals(input.VarObject))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarObject != null)
                {
                    hashCode = (hashCode * 59) + this.VarObject.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Usage != null)
                {
                    hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

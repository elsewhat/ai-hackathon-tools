/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// ContentFilterResult
    /// </summary>
    [DataContract(Name = "contentFilterResult")]
    public partial class ContentFilterResult : IEquatable<ContentFilterResult>, IValidatableObject
    {
        /// <summary>
        /// Defines Severity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Safe for value: safe
            /// </summary>
            [EnumMember(Value = "safe")]
            Safe = 1,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 4
        }


        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name = "severity", IsRequired = true, EmitDefaultValue = true)]
        public SeverityEnum Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentFilterResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterResult" /> class.
        /// </summary>
        /// <param name="severity">severity (required).</param>
        /// <param name="filtered">filtered (required).</param>
        public ContentFilterResult(SeverityEnum severity = default(SeverityEnum), bool filtered = default(bool))
        {
            this.Severity = severity;
            this.Filtered = filtered;
        }

        /// <summary>
        /// Gets or Sets Filtered
        /// </summary>
        [DataMember(Name = "filtered", IsRequired = true, EmitDefaultValue = true)]
        public bool Filtered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterResult {\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Filtered: ").Append(Filtered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterResult);
        }

        /// <summary>
        /// Returns true if ContentFilterResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                ) && 
                (
                    this.Filtered == input.Filtered ||
                    this.Filtered.Equals(input.Filtered)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                hashCode = (hashCode * 59) + this.Filtered.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

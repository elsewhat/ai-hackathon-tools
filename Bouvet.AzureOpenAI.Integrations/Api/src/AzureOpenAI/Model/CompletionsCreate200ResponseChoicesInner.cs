/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AzureOpenAI.Client.OpenAPIDateConverter;

namespace AzureOpenAI.Model
{
    /// <summary>
    /// CompletionsCreate200ResponseChoicesInner
    /// </summary>
    [DataContract(Name = "Completions_Create_200_response_choices_inner")]
    public partial class CompletionsCreate200ResponseChoicesInner : IEquatable<CompletionsCreate200ResponseChoicesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompletionsCreate200ResponseChoicesInner" /> class.
        /// </summary>
        /// <param name="text">text.</param>
        /// <param name="index">index.</param>
        /// <param name="logprobs">logprobs.</param>
        /// <param name="finishReason">finishReason.</param>
        /// <param name="contentFilterResults">contentFilterResults.</param>
        public CompletionsCreate200ResponseChoicesInner(string text = default(string), int index = default(int), CompletionsCreate200ResponseChoicesInnerLogprobs logprobs = default(CompletionsCreate200ResponseChoicesInnerLogprobs), string finishReason = default(string), ContentFilterResults contentFilterResults = default(ContentFilterResults))
        {
            this.Text = text;
            this.Index = index;
            this.Logprobs = logprobs;
            this.FinishReason = finishReason;
            this.ContentFilterResults = contentFilterResults;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets Logprobs
        /// </summary>
        [DataMember(Name = "logprobs", EmitDefaultValue = true)]
        public CompletionsCreate200ResponseChoicesInnerLogprobs Logprobs { get; set; }

        /// <summary>
        /// Gets or Sets FinishReason
        /// </summary>
        [DataMember(Name = "finish_reason", EmitDefaultValue = true)]
        public string FinishReason { get; set; }

        /// <summary>
        /// Gets or Sets ContentFilterResults
        /// </summary>
        [DataMember(Name = "content_filter_results", EmitDefaultValue = true)]
        public ContentFilterResults ContentFilterResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompletionsCreate200ResponseChoicesInner {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Logprobs: ").Append(Logprobs).Append("\n");
            sb.Append("  FinishReason: ").Append(FinishReason).Append("\n");
            sb.Append("  ContentFilterResults: ").Append(ContentFilterResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompletionsCreate200ResponseChoicesInner);
        }

        /// <summary>
        /// Returns true if CompletionsCreate200ResponseChoicesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CompletionsCreate200ResponseChoicesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompletionsCreate200ResponseChoicesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Logprobs == input.Logprobs ||
                    (this.Logprobs != null &&
                    this.Logprobs.Equals(input.Logprobs))
                ) && 
                (
                    this.FinishReason == input.FinishReason ||
                    (this.FinishReason != null &&
                    this.FinishReason.Equals(input.FinishReason))
                ) && 
                (
                    this.ContentFilterResults == input.ContentFilterResults ||
                    (this.ContentFilterResults != null &&
                    this.ContentFilterResults.Equals(input.ContentFilterResults))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                if (this.Logprobs != null)
                {
                    hashCode = (hashCode * 59) + this.Logprobs.GetHashCode();
                }
                if (this.FinishReason != null)
                {
                    hashCode = (hashCode * 59) + this.FinishReason.GetHashCode();
                }
                if (this.ContentFilterResults != null)
                {
                    hashCode = (hashCode * 59) + this.ContentFilterResults.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

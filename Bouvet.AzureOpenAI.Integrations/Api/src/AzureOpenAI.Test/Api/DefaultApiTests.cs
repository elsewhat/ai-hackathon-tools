/*
 * Azure OpenAI Service API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2023-09-01-preview
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AzureOpenAI.Client;
using AzureOpenAI.Api;
// uncomment below to import models
//using AzureOpenAI.Model;

namespace AzureOpenAI.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test ChatCompletionsCreate
        /// </summary>
        [Fact]
        public void ChatCompletionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //CreateChatCompletionRequest createChatCompletionRequest = null;
            //var response = instance.ChatCompletionsCreate(deploymentId, apiVersion, createChatCompletionRequest);
            //Assert.IsType<CreateChatCompletionResponse>(response);
        }

        /// <summary>
        /// Test CompletionsCreate
        /// </summary>
        [Fact]
        public void CompletionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //CompletionsCreateRequest completionsCreateRequest = null;
            //var response = instance.CompletionsCreate(deploymentId, apiVersion, completionsCreateRequest);
            //Assert.IsType<CompletionsCreate200Response>(response);
        }

        /// <summary>
        /// Test EmbeddingsCreate
        /// </summary>
        [Fact]
        public void EmbeddingsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.EmbeddingsCreate(deploymentId, apiVersion, requestBody);
            //Assert.IsType<EmbeddingsCreate200Response>(response);
        }

        /// <summary>
        /// Test ExtensionsChatCompletionsCreate
        /// </summary>
        [Fact]
        public void ExtensionsChatCompletionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //ExtensionsChatCompletionsRequest extensionsChatCompletionsRequest = null;
            //var response = instance.ExtensionsChatCompletionsCreate(deploymentId, apiVersion, extensionsChatCompletionsRequest);
            //Assert.IsType<ExtensionsChatCompletionsResponse>(response);
        }

        /// <summary>
        /// Test TranscriptionsCreate
        /// </summary>
        [Fact]
        public void TranscriptionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //System.IO.Stream file = null;
            //string? prompt = null;
            //ResponseFormat? responseFormat = null;
            //decimal? temperature = null;
            //string? language = null;
            //var response = instance.TranscriptionsCreate(deploymentId, apiVersion, file, prompt, responseFormat, temperature, language);
            //Assert.IsType<TranscriptionsCreate200Response>(response);
        }

        /// <summary>
        /// Test TranslationsCreate
        /// </summary>
        [Fact]
        public void TranslationsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string apiVersion = null;
            //System.IO.Stream file = null;
            //string? prompt = null;
            //ResponseFormat? responseFormat = null;
            //decimal? temperature = null;
            //var response = instance.TranslationsCreate(deploymentId, apiVersion, file, prompt, responseFormat, temperature);
            //Assert.IsType<TranscriptionsCreate200Response>(response);
        }
    }
}
